﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace NewFLD
{
    public partial class MLModel1
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"N_LEar_X", @"N_LEar_X"),new InputOutputColumnPair(@"N_LEar_Y", @"N_LEar_Y"),new InputOutputColumnPair(@"REar_REye_X", @"REar_REye_X"),new InputOutputColumnPair(@"REar_REye_Y", @"REar_REye_Y"),new InputOutputColumnPair(@"LEye_LEar_X", @"LEye_LEar_X"),new InputOutputColumnPair(@"LEye_LEar_Y", @"LEye_LEar_Y"),new InputOutputColumnPair(@"REye_N_X", @"REye_N_X"),new InputOutputColumnPair(@"REye_N_Y", @"REye_N_Y"),new InputOutputColumnPair(@"N_LEye_X", @"N_LEye_X"),new InputOutputColumnPair(@"N_+Eye_Y", @"N_+Eye_Y")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"N_LEar_X",@"N_LEar_Y",@"REar_REye_X",@"REar_REye_Y",@"LEye_LEar_X",@"LEye_LEar_Y",@"REye_N_X",@"REye_N_Y",@"N_LEye_X",@"N_+Eye_Y"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"FLD",inputColumnName:@"FLD"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=20,NumberOfTrees=4,MaximumBinCountPerFeature=255,FeatureFraction=1,LearningRate=0.1,LabelColumnName=@"FLD",FeatureColumnName=@"Features"}),labelColumnName: @"FLD"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
